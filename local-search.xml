<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Pikachu靶场全通关（三）</title>
    <link href="/2025/03/06/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2025/03/06/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h3><h4 id="（1）、XSS（跨站脚本）概述"><a href="#（1）、XSS（跨站脚本）概述" class="headerlink" title="（1）、XSS（跨站脚本）概述"></a>（1）、XSS（跨站脚本）概述</h4><p>Cross-Site Scripting 简称为“CSS”，为避免与前端叠成样式表的缩写”CSS”冲突，故又称XSS。一般XSS可以分为如下几种常见类型：</p><p><strong>1.反射性XSS;</strong></p><p><strong>2.存储型XSS;</strong></p><p><strong>3.DOM型XSS;</strong></p><p>XSS漏洞一直被评估为web漏洞中危害较大的漏洞，在OWASP TOP10的排名中一直属于前三的江湖地位。<br>XSS是一种发生在前端浏览器端的漏洞，所以其危害的对象也是前端用户。<br>形成XSS漏洞的主要原因是程序对输入和输出没有做合适的处理，导致“精心构造”的字符输出在前端时被浏览器当作有效代码解析执行从而产生危害。<br>因此在XSS漏洞的防范上，一般会采用“对输入进行过滤”和“输出进行转义”的方式进行处理:<br>  输入过滤：对输入进行过滤，不允许可能导致XSS攻击的字符输入;<br>  输出转义：根据输出点的位置对输出到前端的内容进行适当转义;</p><h4 id="（2）、关于XSS的本质（ds给出的建议，可以适当看看）"><a href="#（2）、关于XSS的本质（ds给出的建议，可以适当看看）" class="headerlink" title="（2）、关于XSS的本质（ds给出的建议，可以适当看看）"></a>（2）、关于XSS的本质（ds给出的建议，可以适当看看）</h4><h5 id="一、思维实验：浏览器的「语言体系」（底层逻辑）"><a href="#一、思维实验：浏览器的「语言体系」（底层逻辑）" class="headerlink" title="一、思维实验：浏览器的「语言体系」（底层逻辑）"></a>一、思维实验：浏览器的「语言体系」（底层逻辑）</h5><p>假设浏览器是一个<strong>多语言翻译器</strong>，它需要处理三类语言：</p><ol><li><strong>HTML 语法</strong>：<code>&lt;div&gt;</code>, <code>&lt;script&gt;</code> 等标签</li><li><strong>CSS 语法</strong>：<code>color: red;</code> 等样式</li><li><strong>JavaScript 动态语言</strong>：<code>alert(1)</code> 等逻辑</li></ol><p>关键点：<strong>当用户输入的内容突破原有语法边界，混入非法语法时，就会发生代码注入</strong><br> （这就是所有前端漏洞的本质：<strong>越界污染语法</strong>）</p><hr><h5 id="二、XSS-的致命条件（核心原理）"><a href="#二、XSS-的致命条件（核心原理）" class="headerlink" title="二、XSS 的致命条件（核心原理）"></a>二、XSS 的致命条件（核心原理）</h5><p>攻击者需要实现：<br> <strong>用户可控输入 → 未经净化 → 被浏览器解析为有效语法</strong></p><p>你需要像一个侦探一样，寻找三条线索的<strong>交集点</strong>：</p><ol><li><strong>哪里接受外部输入？</strong>（搜索框、URL参数、表单提交…）</li><li><strong>哪里缺少过滤&#x2F;转义？</strong>（尖括号转义？引号闭合？）</li><li><strong>哪里会被浏览器误解析？</strong>（HTML&#x2F;JS&#x2F;CSS 上下文？）</li></ol><hr><h5 id="三、实战思考框架（方法论）"><a href="#三、实战思考框架（方法论）" class="headerlink" title="三、实战思考框架（方法论）"></a>三、实战思考框架（方法论）</h5><p>假设你发现了一个评论区可以输入内容，试试这种自问模式：</p><h6 id="█-第一阶段：探针测试"><a href="#█-第一阶段：探针测试" class="headerlink" title="█ 第一阶段：探针测试"></a>█ 第一阶段：探针测试</h6><ol><li><strong>测试边界符</strong>：输入 <code>&quot;&gt;&lt;&#39;</code> 观察页面是否被破坏？（检查能否闭合原有语法）</li><li><strong>探测解析上下文</strong>：<ul><li>输入 <code>&lt;b&gt;hello&lt;/b&gt;</code> → 若显示加粗文本，说明处于<strong>HTML 上下文</strong></li><li>输入 <code>&#39;;alert(1);//</code> → 若弹窗，说明处于<strong>JS 上下文</strong></li><li>输入 <code>color:red;x:expression(alert(1))</code> → 若样式生效，说明处于<strong>CSS 上下文</strong></li></ul></li></ol><h6 id="█-第二阶段：思考攻击路径（经典场景举例）"><a href="#█-第二阶段：思考攻击路径（经典场景举例）" class="headerlink" title="█ 第二阶段：思考攻击路径（经典场景举例）"></a>█ 第二阶段：思考攻击路径（经典场景举例）</h6><ol><li><p><strong>反射型案例</strong>：</p><URL><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">https://xxx.com/search?q=<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>攻击链</strong>：用户点击 URL → 服务器返回含恶意脚本的页面 → 脚本执行</li></ul></li><li><p><strong>存储型案例</strong>：</p><HTML><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">用户评论区输入：&lt;img <span class="hljs-attribute">src</span>=x <span class="hljs-attribute">onerror</span>=stealCookie()&gt;<br></code></pre></td></tr></table></figure><ul><li><strong>攻击链</strong>：恶意代码存入数据库 → 所有用户访问页面时自动触发</li></ul></li><li><p><strong>DOM 型案例</strong>：</p><JAVASCRIPT><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">// 页面有代码：document.<span class="hljs-built_in">write</span>(location.hash.substring(<span class="hljs-number">1</span>))攻击者构造 <span class="hljs-built_in">URL</span>：<span class="hljs-keyword">https</span>://xxx.com<span class="hljs-comment">#&lt;img src=x onerror=alert(1)&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>攻击链</strong>：前端JS直接使用用户输入 → 未经服务端干预即解析</li></ul></li></ol><h6 id="█-第三阶段：绕过防御的元思考"><a href="#█-第三阶段：绕过防御的元思考" class="headerlink" title="█ 第三阶段：绕过防御的元思考"></a>█ 第三阶段：绕过防御的元思考</h6><p>当看到过滤器时，思考它的<strong>逻辑漏洞</strong>而非盲目尝试 payload：</p><ol><li><strong>黑名单过滤？</strong> → 尝试不常用的标签属性<br> （例如用 <code>&lt;svg/onload=alert(1)&gt;</code> 代替 <code>&lt;script&gt;</code>）</li><li><strong>转义引号？</strong> → 尝试不用引号的写法<br> （例如 <code>onerror=alert(document.domain)</code>）</li><li><strong>内容安全策略（CSP）？</strong> → 分析 <code>script-src</code> 限制<br> （如果有 <code>unsafe-eval</code>，可利用 <code>eval(&#39;al&#39;+&#39;ert(1)&#39;)</code>）</li></ol><hr><h5 id="四、技术纵深（理解现代防御体系）"><a href="#四、技术纵深（理解现代防御体系）" class="headerlink" title="四、技术纵深（理解现代防御体系）"></a>四、技术纵深（理解现代防御体系）</h5><p>理解防御原理能反向提升攻击思维：</p><ol><li><strong>输入过滤 vs 输出编码</strong>：<ul><li>前端过滤是可绕过的（禁用JS即可绕过）</li><li>后端输出的上下文感知编码才是关键（例如在 HTML 中用 <code>&lt;</code>，在 JS 中用 <code>\x3c</code>）</li></ul></li><li><strong>CSP 的本质</strong>：<br> 它是白名单协议，通过响应头声明哪些资源可信<br> （突破点：寻找允许<code>unsafe-inline</code> 或域名白名单过宽的情况）</li><li><strong>Trusted Types API</strong>：<br> 新一代防御方案，强制类型检查所有危险操作（如 innerHTML）<br> （突破点：寻找未受保护的危险 sink）</li></ol><hr><h5 id="五、培养创造性思维的刻意练习"><a href="#五、培养创造性思维的刻意练习" class="headerlink" title="五、培养创造性思维的刻意练习"></a>五、培养创造性思维的刻意练习</h5><ol><li><p><strong>搭建实验环境</strong>：<br> 使用在线沙盒（如 CodePen、JSFiddle）或本地运行 Express 服务器，尝试构造各种场景的 XSS</p></li><li><p><strong>CTF 靶场实战</strong>：<br> 推荐 PortSwigger 的 XSS Labs（从易到难层层递进，附带原理解析）<br> 地址：<a href="https://portswigger.net/web-security/all-labs#cross-site-scripting">https://portswigger.net/web-security/all-labs#cross-site-scripting</a></p></li><li><p><strong>阅读浏览器标准</strong>：<br> 重点学习：</p><ul><li>HTML 解析算法（如何处理畸形标签）</li><li>JavaScript 执行上下文（事件处理器的作用域）</li></ul></li><li><p><strong>调试器思维</strong>：<br> Chrome DevTools 必杀技：</p><JAVASCRIPT><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 在控制台查看 DOM 修改记录monitor(document.body.appendChild)<span class="hljs-regexp">//</span> 查看所有事件监听器getEventListeners(document)<br></code></pre></td></tr></table></figure></li></ol><hr><p>常见误区：<br> ⚠️ <strong>过度关注 payload 库</strong> → 应理解 payload 背后的构造逻辑<br> ✅ <strong>正确姿势</strong>：每次遇到过滤器时，画流程图分析输入数据的完整生命周期</p><hr><p>最终的境界应该是：<strong>如同编译器般理解输入是如何被解析的</strong>。通过这种思维方式，即使是新出现的防御机制，你也能快速定位其逻辑盲点。如果想要具体案例拆解，可以告诉我你的目标场景（如某 CMS 系统、某种框架），我可以为你定制分析路线图。</p><h4 id="（3）、反射型xss-get"><a href="#（3）、反射型xss-get" class="headerlink" title="（3）、反射型xss(get)"></a>（3）、反射型xss(get)</h4><ul><li>首先，我们需要构造一个xss的payload，如：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/payload%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6.png" alt="payload长度限制"></p><p>我们发现这个payload的长度被限制了。</p><ul><li>我们按F12，定位到该输入框，修改长度为100即可</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/%E4%BF%AE%E6%94%B9%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6.png" alt="修改最大长度"></p><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/%E5%8F%8D%E5%B0%84%E6%80%A7xss(get)%E6%88%90%E5%8A%9F.png" alt="反射性xss(get)成功"></p><h4 id="（4）、反射性xss-post"><a href="#（4）、反射性xss-post" class="headerlink" title="（4）、反射性xss(post)"></a>（4）、反射性xss(post)</h4><ul><li>同样，我们还是构建使用相同的payload</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>不过这里我们要输入用户名和密码，这里的用户名和密码就是我们前面暴力破解得到的用户名和密码。</p><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81.png" alt="输入用户名和密码"></p><ul><li>然后我们输入payload，观察url</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/post%E5%9E%8B%E7%9A%84url.png" alt="post型的url"></p><p>这是post型的url。</p><ul><li>get型的url</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/get%E5%9E%8B%E7%9A%84url.png" alt="get型的url"></p><p>这就是二者所不同的地方。</p><table><thead><tr><th>特性</th><th>GET型请求</th><th>POST型请求</th></tr></thead><tbody><tr><td><strong>参数位置</strong></td><td>URL地址栏（明文可见）</td><td>请求体内（不可见）</td></tr><tr><td><strong>典型应用</strong></td><td>数据获取（搜索&#x2F;页面跳转）</td><td>数据提交（登录&#x2F;表单操作）</td></tr><tr><td><strong>长度限制</strong></td><td>受URL长度限制（约2083字符）</td><td>无明确限制</td></tr><tr><td><strong>缓存记录</strong></td><td>会被浏览器&#x2F;服务器日志留存</td><td>默认不缓存</td></tr><tr><td><strong>XSS触发点</strong></td><td>常见于反射型XSS</td><td>常见于存储型或DOM型XSS</td></tr><tr><td><strong>攻击难度</strong></td><td>低（直接构造恶意链接）</td><td>高（需诱导用户提交表单）</td></tr><tr><td><strong>参数可见性</strong></td><td>参数完全暴露</td><td>需抓包工具才能查看</td></tr></tbody></table><h4 id="（5）、存储型XSS"><a href="#（5）、存储型XSS" class="headerlink" title="（5）、存储型XSS"></a>（5）、存储型XSS</h4><ul><li>payload</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/%E5%AD%98%E5%82%A8%E5%9E%8Bxss.png" alt="存储型xss"></p><p>切换回来时也会有弹窗，证明被存储下来了。</p><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/%E5%88%87%E6%8D%A2%E5%9B%9E%E6%9D%A5%E6%97%B6%E4%B9%9F%E6%9C%89%E5%BC%B9%E7%AA%97.png" alt="切换回来时也有弹窗"></p><h4 id="（6）、DOM型xss"><a href="#（6）、DOM型xss" class="headerlink" title="（6）、DOM型xss"></a>（6）、DOM型xss</h4><ul><li>首先随意输入一串字符，F12找到字符所在的位置</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/dom%E5%89%8D%E7%AB%AF.png" alt="dom前端"></p><ul><li>构造payload进行闭合</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#x27; onclick=alert(&#x27;xss&#x27;)&gt;<br></code></pre></td></tr></table></figure><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/dom%E5%9E%8B%E6%98%BE%E7%A4%BAxss.png" alt="dom型显示xss"></p><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/dom%E5%9E%8B-x%E7%9B%B8%E5%90%8C%EF%BC%8C%E5%A4%9A%E7%82%B9%E4%B8%80%E4%B8%8B.png" alt="dom型-x相同，多点一下"></p><h4 id="（7）、xss盲打"><a href="#（7）、xss盲打" class="headerlink" title="（7）、xss盲打"></a>（7）、xss盲打</h4><ul><li>顾名思义前端无法得知是否实现xss，需要到后台才能得知</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/xss%E7%9B%B2%E6%89%93.png" alt="xss盲打"></p><ul><li>根据提示，跳转到后台，发现进行了弹窗</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/%E5%90%8E%E5%8F%B0%E5%BC%B9%E7%AA%97.png" alt="后台弹窗"></p><h4 id="（8）、xss之过滤"><a href="#（8）、xss之过滤" class="headerlink" title="（8）、xss之过滤"></a>（8）、xss之过滤</h4><ul><li>首先先进行尝试，使用原来的payload</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/%E6%8F%90%E4%BA%A4payload%E8%A7%82%E5%AF%9F.png" alt="提交payload观察"></p><p>发现不对，似乎是被过滤掉了。</p><ul><li>继续尝试</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/%E5%B0%9D%E8%AF%95.png" alt="尝试"></p><p>发现是<code>&lt;script&gt;</code>标签被过滤了。</p><ul><li>构造其他的payload来绕过</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;xss&#x27;)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/%E7%BB%95%E8%BF%87.png" alt="绕过"></p><ul><li>实现</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/%E5%AE%9E%E7%8E%B0.png" alt="实现"></p><h4 id="（9）、xss之htmlspecialchars"><a href="#（9）、xss之htmlspecialchars" class="headerlink" title="（9）、xss之htmlspecialchars"></a>（9）、xss之htmlspecialchars</h4><ul><li>首先还是尝试原来的payload</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/%E7%BB%A7%E7%BB%AD%E5%B0%9D%E8%AF%95.png" alt="继续尝试"></p><ul><li>发现没什么效果</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/%E6%B2%A1%E6%9C%89%E6%95%88%E6%9E%9C.png" alt="没有效果"></p><ul><li>F12找到对应的标签</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/%E6%89%BE%E5%88%B0%E5%9C%B0%E6%96%B9.png" alt="找到地方"></p><ul><li>利用&lt;a标签进行构造</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#x27; onclick=&#x27;alert(&quot;xss&quot;)<br></code></pre></td></tr></table></figure><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/%E5%88%A9%E7%94%A8a%E6%A0%87%E7%AD%BE%E6%9E%84%E9%80%A0.png" alt="利用a标签构造"></p><h4 id="（10）、xss之href输出"><a href="#（10）、xss之href输出" class="headerlink" title="（10）、xss之href输出"></a>（10）、xss之href输出</h4><ul><li>还是继续尝试</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/%E5%B0%9D%E8%AF%95%E7%AE%80%E5%8D%95%E7%9A%84.png" alt="尝试简单的"></p><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/%E5%88%A9%E7%94%A8a%E6%A0%87%E7%AD%BE.png" alt="利用a标签"></p><ul><li>发现这两个都不行，使用js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">javascript</span>:<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/%E4%BD%BF%E7%94%A8js.png" alt="使用js"></p><ul><li>顺利完成</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/%E9%A1%BA%E5%88%A9%E5%AE%8C%E6%88%90.png" alt="顺利完成"></p><h4 id="（11）、xss之js输出"><a href="#（11）、xss之js输出" class="headerlink" title="（11）、xss之js输出"></a>（11）、xss之js输出</h4><ul><li>尝试先前的</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/%E5%B0%9D%E8%AF%95%E4%B9%8B%E5%89%8D%E7%9A%84.png" alt="尝试之前的"></p><ul><li>发现没有效果，查看源代码</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/%E6%BA%90%E4%BB%A3%E7%A0%81.png" alt="源代码"></p><ul><li>是因为对应关系有问题</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%89%EF%BC%89/%E6%88%90%E5%8A%9F.png" alt="成功"></p>]]></content>
    
    
    <categories>
      
      <category>靶场实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实践</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pikachu靶场全通关（二）</title>
    <link href="/2025/03/05/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2025/03/05/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="1、burp下载和Firefox配置"><a href="#1、burp下载和Firefox配置" class="headerlink" title="1、burp下载和Firefox配置"></a>1、burp下载和Firefox配置</h3><h4 id="（1）、Java环境配置"><a href="#（1）、Java环境配置" class="headerlink" title="（1）、Java环境配置"></a>（1）、Java环境配置</h4><ul><li><p>官网下载Javajre或者Javajdk：<a href="https://www.java.com/zh-CN/">https://www.java.com/zh-CN/</a></p></li><li><p>正常安装即可。</p></li><li><p>复制Java地址准备配置环境变量：</p></li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/Javajre.png" alt="Javajre"></p><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/Javabin.png" alt="Javabin"></p><ul><li>配置环境变量：</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="环境变量"></p><p>和配置MySQL的大致相同，将两个地址均复制进去，确认即可。</p><ul><li><p>cmd输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java<br></code></pre></td></tr></table></figure><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/cmd%E6%AD%A3%E7%A1%AE.png" alt="cmd正确"></p></li></ul><h4 id="（2）、下载burp"><a href="#（2）、下载burp" class="headerlink" title="（2）、下载burp"></a>（2）、下载burp</h4><ul><li><p>官网下载：<a href="https://portswigger.net/burp">https://portswigger.net/burp</a></p></li><li><p>正常安装即可</p></li></ul><h4 id="（3）、Firefox的代理设置"><a href="#（3）、Firefox的代理设置" class="headerlink" title="（3）、Firefox的代理设置"></a>（3）、Firefox的代理设置</h4><ul><li>burp的监听器端口默认为：</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E7%9B%91%E5%90%AC%E5%99%A8.png" alt="监听器"></p><ul><li>Firefox手动代理为：</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E6%89%8B%E5%8A%A8%E4%BB%A3%E7%90%86.png" alt="手动代理"></p><ul><li>也可选择不使用代理服务器，下载插件FoxyProxy，进行设置即可：</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E6%8F%92%E4%BB%B6%E8%AE%BE%E7%BD%AE.png" alt="插件设置"></p><ul><li>打开扩展即可抓包</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E6%89%93%E5%BC%80%E6%89%A9%E5%B1%95.png" alt="打开扩展"></p><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E6%8A%93%E5%8C%85.png" alt="抓包"></p><h4 id="（4）、关于HTTPS的包如何抓取"><a href="#（4）、关于HTTPS的包如何抓取" class="headerlink" title="（4）、关于HTTPS的包如何抓取"></a>（4）、关于HTTPS的包如何抓取</h4><ul><li>打开burp导出证书</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E5%AF%BC%E5%87%BAca.png" alt="导出ca"></p><ul><li>在Firefox当中导入证书即可</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E5%AF%BC%E5%85%A5%E8%AF%81%E4%B9%A6.png" alt="导入证书"></p><h3 id="2、关于pikahcu爆破关卡的解法和通关"><a href="#2、关于pikahcu爆破关卡的解法和通关" class="headerlink" title="2、关于pikahcu爆破关卡的解法和通关"></a>2、关于pikahcu爆破关卡的解法和通关</h3><h4 id="（1）、基于单表的暴力破解"><a href="#（1）、基于单表的暴力破解" class="headerlink" title="（1）、基于单表的暴力破解"></a>（1）、基于单表的暴力破解</h4><ul><li>随便输入一两个数字进行抓包</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E7%88%86%E7%A0%B4.png" alt="抓包"></p><ul><li>CTRL+I或者右键点击进入后，先进行清除，然后分别选取用户名和密码进行添加</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E6%B8%85%E9%99%A4%E5%90%8E%E6%B7%BB%E5%8A%A0.png" alt="清除后添加"></p><ul><li>选择攻击类型</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E9%80%89%E6%8B%A9%E6%94%BB%E5%87%BB%E7%B1%BB%E5%9E%8B.png" alt="选择攻击类型"></p><ul><li>开始攻击，分别添加用户名和密码的字典</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E5%90%8D.png" alt="添加用户名"></p><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E6%B7%BB%E5%8A%A0%E5%AF%86%E7%A0%81.png" alt="添加密码"></p><ul><li>观察其中长度和其他不同的用户名和密码</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E8%A7%82%E5%AF%9F%E4%B8%8D%E5%90%8C.png" alt="观察不同"></p><ul><li>停止攻击输入用户名和密码</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E6%88%90%E5%8A%9F.png" alt="成功"></p><ul><li>得到用户名和密码为</li></ul><p>admin&#x2F;123456                pikachu&#x2F;000000                test&#x2F;abc123</p><h4 id="（2）、验证码绕过-on-server"><a href="#（2）、验证码绕过-on-server" class="headerlink" title="（2）、验证码绕过(on server)"></a>（2）、验证码绕过(on server)</h4><ul><li>抓包后按照第一关的样子继续攻击即可，主要因为验证码只会在当前界面刷新之后才会继续刷新。</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E4%B8%8D%E5%8F%98%E9%AA%8C%E8%AF%81%E7%A0%81%E6%8A%93%E5%8C%85.png" alt="不变验证码抓包"></p><h4 id="（3）、验证码绕过-on-server"><a href="#（3）、验证码绕过-on-server" class="headerlink" title="（3）、验证码绕过(on server)"></a>（3）、验证码绕过(on server)</h4><ul><li>输入一个错误验证码，发现会产生一个弹窗</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E9%94%99%E8%AF%AF%E9%AA%8C%E8%AF%81%E7%A0%81.png" alt="错误验证码"></p><ul><li>F12查看源代码</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E6%BA%90%E4%BB%A3%E7%A0%81.png" alt="源代码"></p><ul><li>发现是在前端之后，直接F1禁用即可</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E7%A6%81%E7%94%A8JavaScript.png" alt="禁用JavaScript"></p><ul><li>之后的步骤同上，进行爆破即可</li></ul><h4 id="（4）、token防爆破"><a href="#（4）、token防爆破" class="headerlink" title="（4）、token防爆破?"></a>（4）、token防爆破?</h4><ul><li>查看token</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/token.png" alt="token"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;token&quot;</span>通常指的是一个用于验证用户身份和授权访问的令牌。它是一种特殊的字符串或代码，由服务器生成并分配给经过身份验证的用户。用户在成功登录后，服务器会颁发一个token给客户端（例如Web浏览器），客户端将在随后的请求中将该token作为身份验证凭据发送给服务器。<br></code></pre></td></tr></table></figure><ul><li>抓包</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/token%E6%8A%93%E5%8C%85.png" alt="token抓包"></p><ul><li>攻击类型</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/token%E6%94%BB%E5%87%BB%E7%B1%BB%E5%9E%8B.png" alt="token攻击类型"></p><ul><li>选择密码和token进行添加，密码按照之前设置，token如下</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/token%E8%AE%BE%E7%BD%AE.png" alt="token设置"></p><p>点击添加（add）——》重新获得回复（refetch response）</p><ul><li>下方搜索框搜索token，选中、复制、OK</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E9%80%89%E4%B8%AD%E5%90%8Eok.png" alt="选中复制ok"></p><ul><li>返回payloads，选择token的payloads，将复制好的token粘贴到payloads settings</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/token%E7%9A%84%E8%BD%BD%E8%8D%B7.png" alt="token的payloads设置"></p><ul><li>若攻击时报错</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E6%94%BB%E5%87%BB%E6%97%B6%E6%8A%A5%E9%94%99.png" alt="攻击时报错"></p><ul><li>将资源池（Resource Pool）线程数改为1，有些版本在设置当中修改</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E8%B5%84%E6%BA%90%E6%B1%A0.png" alt="资源池"></p><ul><li>成功攻击</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%BA%8C%EF%BC%89/%E6%94%BB%E5%87%BB%E6%88%90%E5%8A%9F.png" alt="攻击成功"></p>]]></content>
    
    
    <categories>
      
      <category>靶场实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实践</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pikachu靶场全通关（一）</title>
    <link href="/2025/03/05/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2025/03/05/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="1、下载并配置PIkachu"><a href="#1、下载并配置PIkachu" class="headerlink" title="1、下载并配置PIkachu"></a>1、下载并配置PIkachu</h3><h4 id="（1）、环境要求"><a href="#（1）、环境要求" class="headerlink" title="（1）、环境要求"></a>（1）、环境要求</h4><ul><li>win11</li><li>pikahcu</li><li>PHP study</li></ul><h4 id="（2）、下载链接"><a href="#（2）、下载链接" class="headerlink" title="（2）、下载链接"></a>（2）、下载链接</h4><ul><li><p>pikachu下载链接：<a href="https://github.com/zhuifengshaonianhanlu/pikachu">https://github.com/zhuifengshaonianhanlu/pikachu</a></p></li><li><p>PHP study下载：<a href="https://www.xp.cn/">https://www.xp.cn/</a></p></li></ul><h4 id="（3）、PHP-study安装与配置"><a href="#（3）、PHP-study安装与配置" class="headerlink" title="（3）、PHP study安装与配置"></a>（3）、PHP study安装与配置</h4><ul><li><p>PHP study安装：官网下载后正常安装即可</p><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%80%EF%BC%89/php%E4%B8%8B%E8%BD%BD.png" alt="PHP study下载"></p></li><li><p>小皮配置界面：</p></li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%80%EF%BC%89/%E5%B0%8F%E7%9A%AE%E4%B8%BB%E7%95%8C%E9%9D%A2.png" alt="PHP study下载"></p><ul><li>MySQL环境变量配置：</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%80%EF%BC%89/%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE.png" alt="文件位置"></p><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%80%EF%BC%89/%E6%96%87%E4%BB%B6%E5%9C%B0%E5%9D%80.png" alt="文件地址"></p><ul><li>右键此电脑——》属性——》高级系统设置——》环境变量——》选择系统变量当中的PATH——》新建——》复制粘贴——》确认</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%80%EF%BC%89/%E6%AD%A5%E9%AA%A4.png" alt="步骤"></p><ul><li><p>打开cmd，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -uroot -p<br></code></pre></td></tr></table></figure></li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%80%EF%BC%89/cmd%E6%88%90%E5%8A%9F%E7%95%8C%E9%9D%A2.png" alt="cmd成功界面"></p><p>数据库默认密码为root</p><h4 id="（4）、pikachu靶场配置"><a href="#（4）、pikachu靶场配置" class="headerlink" title="（4）、pikachu靶场配置"></a>（4）、pikachu靶场配置</h4><ul><li>下载pikachu：</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%80%EF%BC%89/pikachu%E4%B8%8B%E8%BD%BD.png" alt="pikachu下载"></p><ul><li>解压至该目录：</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%80%EF%BC%89/%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE.png" alt="安装位置"></p><ul><li>修改pikachu的配置：</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%80%EF%BC%89/%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE.png" alt="修改配置"></p><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%80%EF%BC%89/%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81.png" alt="修改用户名密码"></p><ul><li>使用小皮进行网站配置：</li></ul><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%80%EF%BC%89/%E5%88%9B%E5%BB%BA%E7%BD%91%E7%AB%99.png" alt="创建网站"></p><p><img src="/../img/Pikachu%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3%EF%BC%88%E4%B8%80%EF%BC%89/%E9%85%8D%E7%BD%AE%E7%95%8C%E9%9D%A2.png" alt="配置界面"></p><h4 id="（5）、安装和初始化"><a href="#（5）、安装和初始化" class="headerlink" title="（5）、安装和初始化"></a>（5）、安装和初始化</h4><ul><li>打开网站，点击安装和初始化即可。</li></ul>]]></content>
    
    
    <categories>
      
      <category>靶场实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实践</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于使用hexo和GitHub创建个人博客</title>
    <link href="/2025/03/01/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8hexo%E5%92%8CGitHub%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/03/01/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8hexo%E5%92%8CGitHub%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="1-环境准备（安装必要工具）"><a href="#1-环境准备（安装必要工具）" class="headerlink" title="1. 环境准备（安装必要工具）"></a><strong>1. 环境准备（安装必要工具）</strong></h3><h4 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="(1) 安装 Node.js"></a><strong>(1) 安装 Node.js</strong></h4><ul><li><p><strong>作用</strong>：Hexo 基于 Node.js，需安装其运行环境。</p></li><li><p>步骤：</p><ol><li><p>访问官网下载：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a><br>建议选择 <strong>LTS 版本</strong>（如 18.x）。</p></li><li><p>双击安装包，勾选 <code>Automatically install the necessary tools</code>（自动安装必要工具，包括 npm）。</p></li><li><p>验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v  <span class="hljs-comment"># 输出版本号如 v18.16.0</span><br>npm -v   <span class="hljs-comment"># 输出版本号如 9.5.1</span><br></code></pre></td></tr></table></figure></li></ol></li></ul><h4 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="(2) 安装 Git"></a><strong>(2) 安装 Git</strong></h4><ul><li><p><strong>作用</strong>：用于版本管理和 GitHub 部署。</p></li><li><p>步骤：</p><ol><li><p>访问官网下载：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p></li><li><p>安装时全默认选项即可。</p></li><li><p>验证安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version  <span class="hljs-comment"># 输出版本号如 git version 2.40.0.windows.1</span><br></code></pre></td></tr></table></figure></li></ol></li></ul><hr><h3 id="2-安装并初始化-Hexo"><a href="#2-安装并初始化-Hexo" class="headerlink" title="2. 安装并初始化 Hexo"></a><strong>2. 安装并初始化 Hexo</strong></h3><h4 id="1-全局安装-Hexo-命令行工具"><a href="#1-全局安装-Hexo-命令行工具" class="headerlink" title="(1) 全局安装 Hexo 命令行工具"></a><strong>(1) 全局安装 Hexo 命令行工具</strong></h4><ul><li><p>以管理员身份打开PowerShell或CMD：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li></ul><h4 id="2-创建博客项目"><a href="#2-创建博客项目" class="headerlink" title="(2) 创建博客项目"></a><strong>(2) 创建博客项目</strong></h4><ul><li><p>在任意目录（如桌面）右键选择 </p><p>Git Bash Here：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myblog  <span class="hljs-comment"># 创建 myblog 文件夹</span><br><span class="hljs-built_in">cd</span> myblog         <span class="hljs-comment"># 进入项目目录</span><br>npm install       <span class="hljs-comment"># 安装依赖</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="3-本地预览"><a href="#3-本地预览" class="headerlink" title="(3) 本地预览"></a><strong>(3) 本地预览</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s<br></code></pre></td></tr></table></figure><ul><li>浏览器访问 <code>http://localhost:4000</code>，看到默认主题的页面即成功。</li></ul><hr><h3 id="3-配置主题（以-Fluid-为例）"><a href="#3-配置主题（以-Fluid-为例）" class="headerlink" title="3. 配置主题（以 Fluid 为例）"></a><strong>3. 配置主题（以 Fluid 为例）</strong></h3><h4 id="1-下载主题"><a href="#1-下载主题" class="headerlink" title="(1) 下载主题"></a><strong>(1) 下载主题</strong></h4><p>在博客项目目录（<code>myblog</code>）中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/fluid-dev/hexo-theme-fluid.git themes/fluid<br></code></pre></td></tr></table></figure><h4 id="2-启用主题"><a href="#2-启用主题" class="headerlink" title="(2) 启用主题"></a><strong>(2) 启用主题</strong></h4><p>修改 <code>myblog/_config.yml</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">theme: fluid  <span class="hljs-comment"># 修改默认的 landscape 为 fluid</span><br></code></pre></td></tr></table></figure><h4 id="3-主题个性化配置"><a href="#3-主题个性化配置" class="headerlink" title="(3) 主题个性化配置"></a><strong>(3) 主题个性化配置</strong></h4><ol><li><p><strong>修改 <code>_config.fluid.yml</code></strong>（注意不是主配置）：</p><ul><li><p>文件位置：<code>myblog/themes/fluid/_config.yml</code></p></li><li><p>参考配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">navbar:</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">&quot;我的安全博客&quot;</span>  <span class="hljs-comment"># 导航栏标题</span><br><span class="hljs-attr">footer:</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;&lt;a href=&quot;https://beian.miit.gov.cn/&quot;&gt;京ICP备12345678号&lt;/a&gt;&#x27;</span>  <span class="hljs-comment"># 备案号（可选）</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>安装渲染器插件</strong>（解决代码高亮问题）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-renderer-marked hexo-renderer-scss<br></code></pre></td></tr></table></figure></li></ol><hr><h3 id="4、连接GitHub"><a href="#4、连接GitHub" class="headerlink" title="4、连接GitHub"></a><strong>4、连接GitHub</strong></h3><p>使用邮箱注册 <a href="https://link.zhihu.com/?target=https://github.com/">GitHub</a> 账户，选择免费账户（Free），并完成邮件验证。</p><p>右键 -&gt; Git Bash Here，<strong>设置用户名和邮箱</strong>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">git config --global user.name &quot;GitHub 用户名&quot;<br>git config --global user.email &quot;GitHub 邮箱&quot;<br></code></pre></td></tr></table></figure><p><strong>创建 SSH 密匙</strong>：</p><p>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。</p><p><strong>添加密匙：</strong></p><p>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p><p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p><p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p><p><img src="/../img/1/SSH.jpg" alt="SSH密钥设置"></p><p><strong>验证连接：</strong></p><p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p><h3 id="5-部署到-GitHub-Pages"><a href="#5-部署到-GitHub-Pages" class="headerlink" title="5. 部署到 GitHub Pages"></a><strong>5. 部署到 GitHub Pages</strong></h3><h4 id="1-创建-GitHub-仓库"><a href="#1-创建-GitHub-仓库" class="headerlink" title="(1) 创建 GitHub 仓库"></a><strong>(1) 创建 GitHub 仓库</strong></h4><ol><li>访问 GitHub → New repository → 仓库名设为 <code>你的用户名.github.io</code>（如 <code>JohnDoe.github.io</code>）。</li><li>初始化仓库，选 <strong>Public</strong>。</li></ol><h4 id="2-配置-Hexo-部署插件"><a href="#2-配置-Hexo-部署插件" class="headerlink" title="(2) 配置 Hexo 部署插件"></a><strong>(2) 配置 Hexo 部署插件</strong></h4><p>在博客项目目录运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h4 id="3-修改部署配置"><a href="#3-修改部署配置" class="headerlink" title="(3) 修改部署配置"></a><strong>(3) 修改部署配置</strong></h4><p>打开 <code>myblog/_config.yml</code>，<strong>尾部</strong>添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo: https://github.com/你的用户名/你的用户名.github.io.git<br>  branch: main<br></code></pre></td></tr></table></figure><h4 id="4-生成并部署"><a href="#4-生成并部署" class="headerlink" title="(4) 生成并部署"></a><strong>(4) 生成并部署</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网站建设</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网站搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
